// Indicador: ZigZag Bands - TT
// v2.0: Corrigido ATR
// v1.0: release
// Tonny Matos Siqueira - tmsiqueira@gmail.com
// Telegram: @tmsiqueira
// Youtube: https://www.youtube.com/c/tonnytrader

// Parametros de configuracao //
// Colocar zero para ativar o ATR
// Ou colocar o valor de desvio
double deviation = 0; 

// Parametros de configuracao do ATR
def ATRsmoothing = 20;
def ATRmultiplicador = 1.2;

// Fim Parametros de configuracao //
// -------------------------------//

def c = newLineData();
def t = newLineData();
def b = newLineData();
def size = size();
def cl = close();
def buf = new double[size];
def dir = new double[size];
def center = new double[size];
def tp = new double[size];
def bt = new double[size];
def lasthigh = new int[size];
def lastlow  = new int[size];
def atr = ATR(ATRsmoothing,0);
double dev = 0;
dir[0]=0; //inicializa com zero.
center[0]=cl.value(0);

//inicializa
  for (int i=0; i<size ; i++)
  {
   center[i]=0;
   tp[i]=0;
   bt[i]=0;
  }
  
  for ( int i = ATRsmoothing; i < size; i++ )
  {
   if (deviation == 0) dev = atr.value(i-ATRsmoothing+1)*ATRmultiplicador; else dev = deviation;
   dir[i]=dir[i-1];
   center[i]=center[i-1];
   tp[i]=center[i]+dev;
   bt[i]=center[i]-dev;          
   
   if ((cl.value(i)-center[i])>=dev) dir[i]=1;
   else if ((cl.value(i)-center[i])<=-dev) dir[i]=-1;

   lasthigh[i]=lasthigh[i-1];
   lastlow[i]=lastlow[i-1];
   
   def restart;
   switch(dir[i])
   {
      case 1: //subindo
         if (cl.value(i)>center[i]) center[i]=cl.value(i);
         switch(dir[i-1]) 
         {
            case 1: //estava subindo, continuacao
            if(cl.value(i)>cl.value(lasthigh[i]))
            {
               lasthigh[i]=i;
            }
            break;
            
            case -1: //estava descendo, reversao
               //corrige a descida anterior
               for (restart=lasthigh[i]+1;restart<=lastlow[i];restart++)
               {                  
                  dir[restart]=-1;
               }
               //corrige a subida atual	
               for(restart=lastlow[i]+1;restart<=i;restart++)
               {
                dir[restart]=1;
               }
               lasthigh[i]=i;
               break;
         }
         break;
      case -1: //descendo
         if (cl.value(i)<center[i]) center[i]=cl.value(i);
         switch(dir[i-1])
         {
            case -1: //estava descendo, continuacao
               if(cl.value(i)<cl.value(lastlow[i]))
               {
                  lastlow[i]=i;
               }
               break;
            case 1: //estava subindo, reversao
             //corrige a subida anterior
             for (restart=lastlow[i]+1;restart<=lasthigh[i];restart++)
               {                    
                  dir[restart]=1;
               }
               
             //corrige a descida atual	
             for(restart=lasthigh[i]+1;restart<=i;restart++)
             {
              dir[restart]=-1;
             }
             lastlow[i]=i;
             break;
         }
         break;
   } 
  }

for(int i=0; i<size;i++)
{
 if (dir[i]==-1)
 {
  c.add(center[i],255,0,0);
  t.add(tp[i],255,0,0);
  b.add(bt[i],255,0,0);
 }
 else
 {
  c.add(center[i],0,255,0);
  t.add(tp[i],0,255,0);
  b.add(bt[i],0,255,0);
 }
}

def result = newLines();
result.add(c);
result.add(t);
result.add(b);
r = result;

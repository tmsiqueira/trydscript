// Indicador: ZigZag Wave - TT
// v7.0: Incluido linhas de media e desvio padrão.
// v6.0: Incluido o volume do ultimo candle como em decisão e alterado a cor do maior volume do movimento.
// v5.0: Marcação do maior volume do movimento e alterado para não repintar.
// v4.0: Corrigido para volume quantitativo
// v3.0: Corrigido ATR. Incluido parametro Escurecer.
// v2.0: Incluido parametro Inverter.
// v1.0: release
// Tonny Matos Siqueira - tmsiqueira@gmail.com
// Telegram: @tmsiqueira
// Youtube: https://www.youtube.com/c/tonnytrader

// Parametros de configuracao //
// Colocar zero para ativar o ATR
// Ou colocar o valor de desvio
double deviation = 0; 

// Media e desvio padrao
def ativar_media = 1; // 0 - Não plota media, 1 - plota as linhas de media
def media = 25;
def desv1 = 1;
def desv2 = 2;
def desv3 = 3;

// Inverter barras de onda vendedora
def Inverter = 0; // 0 - Não inverte, 1 - Inverte.
// Escurecer as cores das barras
def Escurecer = 0; // 0 - Claro, 1 - Escuro.

// Parametros de configuracao do ATR
def ATRsmoothing = 20;
def ATRmultiplicador = 1.2;

// Fim Parametros de configuracao //
// -------------------------------//

def cds = newLineData();
def m = newLineData();
def l1 = newLineData();
def l2 = newLineData();
def l3 = newLineData();
def bufmean = newLineData();
def size = size();
def cl = close();
def vl = sharesVolume();
def buf = new double[size];
def dir = new double[size];
def center;
def atr = ATR(ATRsmoothing,0);
double dev = 0;
def direcao = 1;
def maiorvol = 0;
def maiorvolidx = 0;

if (Inverter==0) Inverter = 1; else Inverter = -1;

//inicializa os buffers
for (int i=0; i<size ; i++)
{
  buf[i]=0;
  dir[i]=0;
}

//Define a direção do movimento
center=cl.value(ATRsmoothing);
for ( int i = ATRsmoothing; i < size-1; i++ )
{
 //Define os limites do zigzag
 if (deviation == 0) dev = atr.value(i-ATRsmoothing+1)*ATRmultiplicador; else dev = deviation;

 //Identifica se a direção de um movimento maior que o dev
 if ((cl.value(i)-center)>=dev) 
 {
  dir[i]  = 1;
  direcao = 1;
 }
 else if ((cl.value(i)-center)<=-dev)
 {
  dir[i]  = -1;
  direcao = -1
 }
 
 //Identifica se há persistencia no movimento (topo acima, fundo abaixo)
 if (direcao == 1) if (cl.value(i)>center)
 {
   center=cl.value(i);
   dir[i]  = 1;
 }
 if (direcao == -1) if (cl.value(i)<center)
 {
   center=cl.value(i);
   dir[i]  = -1;
 }
}

//Completa a direcao dos movimentos nao decididos
for (int i=size-2; i>0 ; i--)
{
 if (dir[i]==0) dir[i]=dir[i+1];
}

dir[size-1]=0;

//Realiza o acumulo de volume na direcao do movimento
buf[0]=vl.value(0);
maiorvol = vl.value(0);
maiorvolidx = 1;
for (int i=1; i<size ; i++)
{
 if (dir[i]==dir[i-1])
 {
   buf[i] = buf[i-1]+vl.value(i);
   if (vl.value(i)>maiorvol)
   {
     maiorvol = vl.value(i);
     maiorvolidx = i;
   }
 }
 else
 {
   buf[i] = vl.value(i);
   dir[maiorvolidx] = dir[maiorvolidx]*2;
   maiorvol = vl.value(i);
   maiorvolidx = i;
   bufmean.add(buf[i-1]);
 }
}

if (ativar_media == 1)
{
  def mean = MA(bufmean,media,0);
  def std = STDDEV(bufmean,media);
  def med = mean.value(mean.size()-1);
  def desv = std.value(std.size()-1);
  for (int i=1; i<size-1 ; i++)
  {
    m.add(med);
    l1.add(med+desv1*desv);
    l2.add(med+desv2*desv);
    l3.add(med+desv3*desv);
  }
}

if (Math.abs(dir[maiorvolidx]) != 2) dir[maiorvolidx]=dir[maiorvolidx]*2;

if (Escurecer==0)
	for (int i=0; i<size ; i++)
	{
		if (dir[i]==-1) cds.add(Inverter*buf[i],255,0,0);
		else if (dir[i]==1) cds.add(buf[i],0,255,0);
		else if (Math.abs(dir[i]) == 2) cds.add(buf[i],255,255,255);
     	else cds.add(buf[i],255,255,0);
	}
else
	for (int i=0; i<size ; i++)
	{
		if (dir[i]==-1) cds.add(Inverter*buf[i],100,0,0);
		else if (dir[i]==1) cds.add(buf[i],0,100,0);
		else if (Math.abs(dir[i]) == 2) cds.add(buf[i],100,100,100);
		else cds.add(buf[i],100,100,0);
	}

cds.setType(3); //Define como histograma

def result = newLines();
result.add(cds);
if (ativar_media == 1)
{
  m.setColor(0,255,0); //verde
  l1.setColor(255,244,2); //amarelo
  l2.setColor(255,128,0); //laranja
  l3.setColor(255,0,0); //vermelho
  result.add(m);
  result.add(l1);
  result.add(l2);
  result.add(l3);
}
r = result;0